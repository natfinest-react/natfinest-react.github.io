{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialUser = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null;\nexport const initialState = {\n  user: initialUser,\n  feeds: []\n}; // A slice of user with our reducers\n\nconst feedsSlice = createSlice({\n  name: \"feeds\",\n  initialState,\n  reducers: {\n    getFeedSuccess: (state, action) => {\n      state.feeds = action.payload;\n    },\n    getFeedsFailure: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n}); // Three actions generated from the slice\n\nexport const {\n  getFeedSuccess,\n  getFeedsFailure\n} = feedsSlice.actions; // A selector\n\nexport const feedsSelector = state => state.feeds; // The reducer\n\nexport default feedsSlice.reducer; // Asynchronous thunk action\n// export const fetchFeeds = () => async (dispatch) => {\n//   const token = initialState.user.user.token;\n//   axios\n//     .get(\"http://localhost:5000/api/v1/feed\", {\n//       headers: {\n//         Authorization: \"Bearer \" + token,\n//       },\n//     })\n//     .then((response) => {\n//       // const feed = response.data;\n//       const feed = response.data.data;\n//       console.log(feed);\n//       dispatch(getFeedSuccess({ feed }));\n//     })\n//     .catch((error) => {\n//       const err = error.response.data.error;\n//       dispatch(getFeedsFailure({ err }));\n//     });\n// };\n\nexport function fetchFeeds() {\n  return async dispatch => {\n    // dispatch(getPosts());\n    try {\n      const bearer_token = initialState.user.user.token;\n      const response = await fetch(\"http://localhost:5000/api/v1/feed\", {\n        headers: {\n          authorization: \"Bearer \" + bearer_token\n        }\n      });\n      const data = await response.json();\n      console.log(data.data);\n      dispatch(getFeedSuccess(data.data));\n    } catch (error) {\n      dispatch(getFeedsFailure());\n    }\n  };\n}","map":{"version":3,"sources":["/Users/user/Documents/Andela_Teamwork_Frontend/frontend/src/slices/feeds.js"],"names":["createSlice","axios","initialUser","localStorage","getItem","JSON","parse","initialState","user","feeds","feedsSlice","name","reducers","getFeedSuccess","state","action","payload","getFeedsFailure","error","actions","feedsSelector","reducer","fetchFeeds","dispatch","bearer_token","token","response","fetch","headers","authorization","data","json","console","log"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAChBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADgB,GAEhB,IAFJ;AAIA,OAAO,MAAMG,YAAY,GAAG;AAC1BC,EAAAA,IAAI,EAAEN,WADoB;AAE1BO,EAAAA,KAAK,EAAE;AAFmB,CAArB,C,CAKP;;AACA,MAAMC,UAAU,GAAGV,WAAW,CAAC;AAC7BW,EAAAA,IAAI,EAAE,OADuB;AAE7BJ,EAAAA,YAF6B;AAG7BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACD,KAHO;AAIRC,IAAAA,eAAe,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACI,KAAN,GAAcH,MAAM,CAACC,OAArB;AACD;AANO;AAHmB,CAAD,CAA9B,C,CAaA;;AACA,OAAO,MAAM;AAAEH,EAAAA,cAAF;AAAkBI,EAAAA;AAAlB,IAAsCP,UAAU,CAACS,OAAvD,C,CAEP;;AACA,OAAO,MAAMC,aAAa,GAAIN,KAAD,IAAWA,KAAK,CAACL,KAAvC,C,CAEP;;AACA,eAAeC,UAAU,CAACW,OAA1B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAO,MAAOC,QAAP,IAAoB;AACzB;AAEA,QAAI;AACF,YAAMC,YAAY,GAAGjB,YAAY,CAACC,IAAb,CAAkBA,IAAlB,CAAuBiB,KAA5C;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAsC;AAChEC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAE,YAAYL;AADpB;AADuD,OAAtC,CAA5B;AAMA,YAAMM,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACA,IAAjB;AAEAP,MAAAA,QAAQ,CAACV,cAAc,CAACiB,IAAI,CAACA,IAAN,CAAf,CAAR;AACD,KAZD,CAYE,OAAOZ,KAAP,EAAc;AACdK,MAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACD;AACF,GAlBD;AAmBD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialUser = localStorage.getItem(\"user\")\n  ? JSON.parse(localStorage.getItem(\"user\"))\n  : null;\n\nexport const initialState = {\n  user: initialUser,\n  feeds: [],\n};\n\n// A slice of user with our reducers\nconst feedsSlice = createSlice({\n  name: \"feeds\",\n  initialState,\n  reducers: {\n    getFeedSuccess: (state, action) => {\n      state.feeds = action.payload;\n    },\n    getFeedsFailure: (state, action) => {\n      state.error = action.payload;\n    },\n  },\n});\n\n// Three actions generated from the slice\nexport const { getFeedSuccess, getFeedsFailure } = feedsSlice.actions;\n\n// A selector\nexport const feedsSelector = (state) => state.feeds;\n\n// The reducer\nexport default feedsSlice.reducer;\n\n// Asynchronous thunk action\n// export const fetchFeeds = () => async (dispatch) => {\n//   const token = initialState.user.user.token;\n//   axios\n//     .get(\"http://localhost:5000/api/v1/feed\", {\n//       headers: {\n//         Authorization: \"Bearer \" + token,\n//       },\n//     })\n//     .then((response) => {\n//       // const feed = response.data;\n//       const feed = response.data.data;\n//       console.log(feed);\n//       dispatch(getFeedSuccess({ feed }));\n//     })\n//     .catch((error) => {\n//       const err = error.response.data.error;\n//       dispatch(getFeedsFailure({ err }));\n//     });\n// };\n\nexport function fetchFeeds() {\n  return async (dispatch) => {\n    // dispatch(getPosts());\n\n    try {\n      const bearer_token = initialState.user.user.token;\n      const response = await fetch(\"http://localhost:5000/api/v1/feed\", {\n        headers: {\n          authorization: \"Bearer \" + bearer_token,\n        },\n      });\n\n      const data = await response.json();\n      console.log(data.data);\n\n      dispatch(getFeedSuccess(data.data));\n    } catch (error) {\n      dispatch(getFeedsFailure());\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}