{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Andela_Teamwork_Frontend/frontend/src/containers/Login/index.js\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, logout, userSelector } from \"../../slices/user\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { Grid, Card, CardContent, Typography, Button } from \"@material-ui/core\";\nimport { Field, Form, Formik } from \"formik\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const {\n    user,\n    loading,\n    hasErrors\n  } = useSelector(userSelector);\n\n  const renderPosts = () => {\n    if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 25\n      }\n    }, \"Loading posts...\");\n    if (hasErrors) return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Snackbar, {\n      open: open,\n      autoHideDuration: 6000,\n      onClose: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      onClose: handleClose,\n      severity: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, \"This is a success message!\")));\n\n    if (user) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, \"Hi, \", user.username, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => dispatch(logout()),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }\n      }, \"Logout\"));\n    } // return user.map((user) => <User key={user.id} post={user} excerpt />);\n\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, renderPosts(), /*#__PURE__*/React.createElement(Grid, {\n    style: {\n      marginTop: 50,\n      textAlign: \"center\"\n    },\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      username: \"\",\n      password: \"\"\n    },\n    onSubmit: (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      dispatch(login(values)); // When button submits form and form is in the process of submitting, submit button is disabled\n\n      setSubmitting(true); // Resets form after submission is complete\n\n      resetForm(); // Sets setSubmitting to false after form is reset\n\n      setSubmitting(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, ({\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    id: \"outlined-full-width\",\n    component: TextField,\n    type: \"text\",\n    name: \"username\",\n    label: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    component: TextField,\n    type: \"password\",\n    name: \"password\",\n    label: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: isSubmitting,\n    variant: \"contained\",\n    color: \"primary\",\n    align: \"center\",\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"Submit\")))))))) //\n  ;\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/user/Documents/Andela_Teamwork_Frontend/frontend/src/containers/Login/index.js"],"names":["React","useEffect","useDispatch","useSelector","login","logout","userSelector","TextField","Grid","Card","CardContent","Typography","Button","Field","Form","Formik","Login","dispatch","user","loading","hasErrors","renderPosts","open","handleClose","username","marginTop","textAlign","password","values","setSubmitting","resetForm","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, logout, userSelector } from \"../../slices/user\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { Grid, Card, CardContent, Typography, Button } from \"@material-ui/core\";\nimport { Field, Form, Formik } from \"formik\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const { user, loading, hasErrors } = useSelector(userSelector);\n\n  const renderPosts = () => {\n    if (loading) return <p>Loading posts...</p>;\n    if (hasErrors)\n      return (\n        <>\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"success\">\n              This is a success message!\n            </Alert>\n          </Snackbar>\n        </>\n      );\n    if (user) {\n      return (\n        <div>\n          Hi, {user.username}\n          <button onClick={() => dispatch(logout())}>Logout</button>\n        </div>\n      );\n    }\n    // return user.map((user) => <User key={user.id} post={user} excerpt />);\n  };\n\n  return (\n    <div>\n      {renderPosts()}\n      <Grid\n        style={{ marginTop: 50, textAlign: \"center\" }}\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item xs={6}>\n          <Card className=\"mt-2\">\n            <CardContent>\n              <Typography variant=\"h4\" align=\"center\">\n                Login\n              </Typography>\n              <Formik\n                initialValues={{ username: \"\", password: \"\" }}\n                onSubmit={(values, { setSubmitting, resetForm }) => {\n                  dispatch(login(values));\n                  // When button submits form and form is in the process of submitting, submit button is disabled\n                  setSubmitting(true);\n\n                  // Resets form after submission is complete\n                  resetForm();\n\n                  // Sets setSubmitting to false after form is reset\n                  setSubmitting(false);\n                }}\n              >\n                {({ isSubmitting }) => (\n                  <Form>\n                    <Field\n                      id=\"outlined-full-width\"\n                      component={TextField}\n                      type=\"text\"\n                      name=\"username\"\n                      label=\"Email\"\n                    />\n                    <Field\n                      component={TextField}\n                      type=\"password\"\n                      name=\"password\"\n                      label=\"Password\"\n                    />\n                    <Button\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                      variant=\"contained\"\n                      color=\"primary\"\n                      align=\"center\"\n                      style={{ marginTop: 20 }}\n                    >\n                      Submit\n                    </Button>\n                  </Form>\n                )}\n              </Formik>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n\n    //\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}