{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialUser = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null;\nexport const initialState = {\n  user: initialUser,\n  loading: false,\n  hasErrors: false,\n  articles: []\n}; // A slice of user with our reducers\n\nconst articlesSlice = createSlice({\n  name: \"articles\",\n  initialState,\n  reducers: {\n    getArticles: state => {\n      state.loading = true;\n    },\n    getArticlesSuccess: (state, action) => {\n      state.articles = action.payload;\n      state.loading = false;\n    },\n    getArticlesFailure: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    postArticleSuccess: (state, action) => {// state.articles = action.payload;\n    },\n    postArticleFailure: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n}); // Three actions generated from the slice\n\nexport const {\n  getArticles,\n  getArticlesSuccess,\n  getArticlesFailure,\n  postArticleFailure,\n  postArticleSuccess\n} = articlesSlice.actions; // A selector\n\nexport const articlesSelector = state => state.articles; // The reducer\n\nexport default articlesSlice.reducer; // Asynchronous thunk action\n// export const fetchFeeds = () => async (dispatch) => {\n//   const token = initialState.user.user.token;\n//   axios\n//     .get(\"http://localhost:5000/api/v1/feed\", {\n//       headers: {\n//         Authorization: \"Bearer \" + token,\n//       },\n//     })\n//     .then((response) => {\n//       // const feed = response.data;\n//       const feed = response.data.data;\n//       console.log(feed);\n//       dispatch(getFeedSuccess({ feed }));\n//     })\n//     .catch((error) => {\n//       const err = error.response.data.error;\n//       dispatch(getFeedsFailure({ err }));\n//     });\n// };\n\nexport function postArticle({\n  form_title,\n  form_desc,\n  form_cat,\n  form_share\n}) {\n  const bearer_token = JSON.parse(localStorage.getItem(\"user\")).user.token;\n  const content = {\n    title: form_title,\n    description: form_desc,\n    category: form_cat,\n    share: form_share\n  };\n  return async dispatch => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/v1/articles\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\",\n          authorization: \"Bearer \" + bearer_token\n        },\n        body: JSON.stringify(content)\n      });\n      const data = await response.json();\n      dispatch(postArticleSuccess(data.data.message));\n    } catch (error) {\n      console.log(JSON.stringify(content));\n      console.log(error);\n      dispatch(postArticleFailure());\n    }\n  };\n}\nexport function fetchArticles() {\n  const bearer_token = JSON.parse(localStorage.getItem(\"user\")).user.token;\n  return async dispatch => {\n    dispatch(getArticles());\n\n    try {\n      const response = await fetch(\"http://localhost:5000/api/v1/articles\", {\n        headers: {\n          authorization: \"Bearer \" + bearer_token\n        }\n      });\n      const data = await response.json();\n      if (data.data) console.log(data.data);\n      dispatch(getArticlesSuccess(data.data.message));\n    } catch (error) {\n      console.log(error);\n      dispatch(getArticlesFailure());\n    }\n  };\n}","map":{"version":3,"sources":["/Users/user/Documents/Andela_Teamwork_Frontend/frontend/src/slices/articles.js"],"names":["createSlice","initialUser","localStorage","getItem","JSON","parse","initialState","user","loading","hasErrors","articles","articlesSlice","name","reducers","getArticles","state","getArticlesSuccess","action","payload","getArticlesFailure","error","postArticleSuccess","postArticleFailure","actions","articlesSelector","reducer","postArticle","form_title","form_desc","form_cat","form_share","bearer_token","token","content","title","description","category","share","dispatch","response","fetch","method","headers","Accept","authorization","body","stringify","data","json","message","console","log","fetchArticles"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nconst initialUser = localStorage.getItem(\"user\")\n  ? JSON.parse(localStorage.getItem(\"user\"))\n  : null;\n\nexport const initialState = {\n  user: initialUser,\n  loading: false,\n  hasErrors: false,\n  articles: [],\n};\n\n// A slice of user with our reducers\nconst articlesSlice = createSlice({\n  name: \"articles\",\n  initialState,\n  reducers: {\n    getArticles: (state) => {\n      state.loading = true;\n    },\n    getArticlesSuccess: (state, action) => {\n      state.articles = action.payload;\n      state.loading = false;\n    },\n    getArticlesFailure: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    postArticleSuccess: (state, action) => {\n      // state.articles = action.payload;\n    },\n    postArticleFailure: (state, action) => {\n      state.error = action.payload;\n    },\n  },\n});\n\n// Three actions generated from the slice\nexport const {\n  getArticles,\n  getArticlesSuccess,\n  getArticlesFailure,\n  postArticleFailure,\n  postArticleSuccess,\n} = articlesSlice.actions;\n\n// A selector\nexport const articlesSelector = (state) => state.articles;\n\n// The reducer\nexport default articlesSlice.reducer;\n\n// Asynchronous thunk action\n// export const fetchFeeds = () => async (dispatch) => {\n//   const token = initialState.user.user.token;\n//   axios\n//     .get(\"http://localhost:5000/api/v1/feed\", {\n//       headers: {\n//         Authorization: \"Bearer \" + token,\n//       },\n//     })\n//     .then((response) => {\n//       // const feed = response.data;\n//       const feed = response.data.data;\n//       console.log(feed);\n//       dispatch(getFeedSuccess({ feed }));\n//     })\n//     .catch((error) => {\n//       const err = error.response.data.error;\n//       dispatch(getFeedsFailure({ err }));\n//     });\n// };\nexport function postArticle({ form_title, form_desc, form_cat, form_share }) {\n  const bearer_token = JSON.parse(localStorage.getItem(\"user\")).user.token;\n  const content = {\n    title: form_title,\n    description: form_desc,\n    category: form_cat,\n    share: form_share,\n  };\n  return async (dispatch) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/v1/articles\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\",\n          authorization: \"Bearer \" + bearer_token,\n        },\n        body: JSON.stringify(content),\n      });\n\n      const data = await response.json();\n      dispatch(postArticleSuccess(data.data.message));\n    } catch (error) {\n      console.log(JSON.stringify(content));\n      console.log(error);\n      dispatch(postArticleFailure());\n    }\n  };\n}\n\nexport function fetchArticles() {\n  const bearer_token = JSON.parse(localStorage.getItem(\"user\")).user.token;\n  return async (dispatch) => {\n    dispatch(getArticles());\n    try {\n      const response = await fetch(\"http://localhost:5000/api/v1/articles\", {\n        headers: {\n          authorization: \"Bearer \" + bearer_token,\n        },\n      });\n\n      const data = await response.json();\n      if (data.data) console.log(data.data);\n      dispatch(getArticlesSuccess(data.data.message));\n    } catch (error) {\n      console.log(error);\n      dispatch(getArticlesFailure());\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}