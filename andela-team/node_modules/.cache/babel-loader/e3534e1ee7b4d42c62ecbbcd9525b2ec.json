{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  posts: []\n}; // A slice for posts with our three reducers\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    getPosts: state => {\n      state.loading = true;\n    },\n    getPostsSuccess: (state, {\n      payload\n    }) => {\n      state.posts = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getPostsFailure: state => {\n      state.loading = false;\n      state.hasErrors = true;\n    }\n  }\n}); // Three actions generated from the slice\n\nexport const {\n  getPosts,\n  getPostsSuccess,\n  getPostsFailure\n} = postsSlice.actions; // A selector\n\nexport const postsSelector = state => state.posts; // The reducer\n\nexport default postsSlice.reducer; // Asynchronous thunk action\n\nexport function fetchPosts() {\n  return async dispatch => {\n    dispatch(getPosts());\n\n    try {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n      const data = await response.json();\n      dispatch(getPostsSuccess(data));\n    } catch (error) {\n      dispatch(getPostsFailure());\n    }\n  };\n}","map":{"version":3,"sources":["/Users/user/Documents/Andela_Teamwork_Frontend/frontend/src/slices/feeds.js"],"names":["createSlice","initialState","loading","hasErrors","posts","postsSlice","name","reducers","getPosts","state","getPostsSuccess","payload","getPostsFailure","actions","postsSelector","reducer","fetchPosts","dispatch","response","fetch","data","json","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,SAAS,EAAE,KAFe;AAG1BC,EAAAA,KAAK,EAAE;AAHmB,CAArB,C,CAKP;;AACA,MAAMC,UAAU,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,OADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAGC,KAAD,IAAW;AACnBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAHO;AAIRQ,IAAAA,eAAe,EAAE,CAACD,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAAwB;AACvCF,MAAAA,KAAK,CAACL,KAAN,GAAcO,OAAd;AACAF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACD,KARO;AASRS,IAAAA,eAAe,EAAGH,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD;AAZO;AAHmB,CAAD,CAA9B,C,CAmBA;;AACA,OAAO,MAAM;AACXK,EAAAA,QADW;AAEXE,EAAAA,eAFW;AAGXE,EAAAA;AAHW,IAITP,UAAU,CAACQ,OAJR,C,CAMP;;AACA,OAAO,MAAMC,aAAa,GAAIL,KAAD,IAAWA,KAAK,CAACL,KAAvC,C,CAEP;;AACA,eAAeC,UAAU,CAACU,OAA1B,C,CAEA;;AACA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACT,QAAQ,EAAT,CAAR;;AAEA,QAAI;AACF,YAAMU,QAAQ,GAAG,MAAMC,KAAK,CAC1B,4CAD0B,CAA5B;AAGA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,MAAAA,QAAQ,CAACP,eAAe,CAACU,IAAD,CAAhB,CAAR;AACD,KAPD,CAOE,OAAOE,KAAP,EAAc;AACdL,MAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AACD;AACF,GAbD;AAcD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  posts: [],\n};\n// A slice for posts with our three reducers\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    getPosts: (state) => {\n      state.loading = true;\n    },\n    getPostsSuccess: (state, { payload }) => {\n      state.posts = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getPostsFailure: (state) => {\n      state.loading = false;\n      state.hasErrors = true;\n    },\n  },\n});\n\n// Three actions generated from the slice\nexport const {\n  getPosts,\n  getPostsSuccess,\n  getPostsFailure,\n} = postsSlice.actions;\n\n// A selector\nexport const postsSelector = (state) => state.posts;\n\n// The reducer\nexport default postsSlice.reducer;\n\n// Asynchronous thunk action\nexport function fetchPosts() {\n  return async (dispatch) => {\n    dispatch(getPosts());\n\n    try {\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/posts\"\n      );\n      const data = await response.json();\n\n      dispatch(getPostsSuccess(data));\n    } catch (error) {\n      dispatch(getPostsFailure());\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}