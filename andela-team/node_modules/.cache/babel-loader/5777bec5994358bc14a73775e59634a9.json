{"ast":null,"code":"import MuiTextField from '@material-ui/core/TextField';\nimport MuiSwitch from '@material-ui/core/Switch';\nimport invariant from 'tiny-warning';\nimport MuiCheckbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MuiSelect from '@material-ui/core/Select';\nimport { getIn } from 'formik';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MuiRadioGroup from '@material-ui/core/RadioGroup';\nimport { createElement } from 'react';\nimport MuiInputBase from '@material-ui/core/InputBase';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n}\n\nfunction fieldToTextField(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      _b = _a.form,\n      isSubmitting = _b.isSubmitting,\n      touched = _b.touched,\n      errors = _b.errors,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\"]);\n\n  var fieldError = getIn(errors, field.name);\n  var showError = getIn(touched, field.name) && !!fieldError;\n  return __assign(__assign(__assign({}, props), field), {\n    error: showError,\n    helperText: showError ? fieldError : props.helperText,\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting,\n    variant: props.variant\n  });\n}\n\nfunction TextField(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  return createElement(MuiTextField, __assign({}, fieldToTextField(props)), children);\n}\n\nTextField.displayName = 'FormikMaterialUITextField';\n\nfunction fieldToSwitch(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      isSubmitting = _a.form.isSubmitting,\n      type = _a.type,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\", \"type\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(type === 'checkbox', \"property type=checkbox is missing from field \" + field.name + \", this can caused unexpected behaviour\");\n  }\n\n  return __assign(__assign({\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting\n  }, props), field);\n}\n\nfunction Switch(props) {\n  return createElement(MuiSwitch, __assign({}, fieldToSwitch(props)));\n}\n\nSwitch.displayName = 'FormikMaterialUISwitch';\n\nfunction fieldToCheckbox(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      isSubmitting = _a.form.isSubmitting,\n      type = _a.type,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\", \"type\"]);\n\n  var indeterminate = !Array.isArray(field.value) && field.value == null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(type === 'checkbox', \"property type=checkbox is missing from field \" + field.name + \", this can caused unexpected behaviour\");\n  }\n\n  return __assign(__assign({\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting,\n    indeterminate: indeterminate\n  }, props), field);\n}\n\nfunction Checkbox(props) {\n  return createElement(MuiCheckbox, __assign({}, fieldToCheckbox(props)));\n}\n\nCheckbox.displayName = 'FormikMaterialUICheckbox';\n\nfunction CheckboxWithLabel(_a) {\n  var Label = _a.Label,\n      props = __rest(_a, [\"Label\"]);\n\n  return createElement(FormControlLabel, __assign({\n    control: createElement(MuiCheckbox, __assign({}, fieldToCheckbox(props)))\n  }, Label));\n}\n\nCheckboxWithLabel.displayName = 'FormikMaterialUICheckboxWithLabel';\n\nfunction fieldToSelect(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      isSubmitting = _a.form.isSubmitting,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\"]);\n\n  return __assign(__assign({\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting\n  }, props), field);\n}\n\nfunction Select(props) {\n  return createElement(MuiSelect, __assign({}, fieldToSelect(props)));\n}\n\nSelect.displayName = 'FormikMaterialUISelect';\n\nvar SimpleFileUpload = function (_a) {\n  var field = _a.field,\n      _b = _a.form,\n      isSubmitting = _b.isSubmitting,\n      touched = _b.touched,\n      errors = _b.errors,\n      setFieldValue = _b.setFieldValue,\n      label = _a.label,\n      _c = _a.disabled,\n      disabled = _c === void 0 ? false : _c,\n      inputProps = _a.InputProps,\n      inputLabelProps = _a.InputLabelProps;\n  var error = getIn(touched, field.name) && getIn(errors, field.name);\n  return createElement(\"div\", null, createElement(FormControl, null, label && createElement(InputLabel, __assign({\n    shrink: true,\n    error: !!error\n  }, inputLabelProps), label), createElement(Input, __assign({\n    error: !!error,\n    inputProps: {\n      type: 'file',\n      disabled: disabled || isSubmitting,\n      name: field.name,\n      onChange: function (event) {\n        var file = event.currentTarget.files[0];\n        setFieldValue(field.name, file);\n      }\n    }\n  }, inputProps)), error && createElement(FormHelperText, {\n    error: true\n  }, error)));\n};\n\nfunction fieldToRadioGroup(_a) {\n  var field = _a.field,\n      form = _a.form,\n      props = __rest(_a, [\"field\", \"form\"]);\n\n  return __assign(__assign({}, props), field);\n}\n\nfunction RadioGroup(props) {\n  return createElement(MuiRadioGroup, __assign({}, fieldToRadioGroup(props)));\n}\n\nRadioGroup.displayName = 'FormikMaterialUIRadioGroup';\n\nfunction fieldToInputBase(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      isSubmitting = _a.form.isSubmitting,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\"]);\n\n  return __assign(__assign({\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting\n  }, props), field);\n}\n\nfunction InputBase(props) {\n  return createElement(MuiInputBase, __assign({}, fieldToInputBase(props)));\n}\n\nInputBase.displayName = 'FormikMaterialUIInputBase';\nexport { fieldToTextField, TextField, fieldToSwitch, Switch, fieldToCheckbox, Checkbox, CheckboxWithLabel, fieldToSelect, Select, SimpleFileUpload, fieldToRadioGroup, RadioGroup, fieldToInputBase, InputBase };","map":{"version":3,"sources":["../src/TextField.tsx","../src/Switch.tsx","../src/Checkbox.tsx","../src/CheckboxWithLabel.tsx","../src/Select.tsx","../src/SimpleFileUpload.tsx","../src/RadioGroup.tsx","../src/InputBase.tsx"],"names":["React.createElement"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport MuiTextField, {\n  TextFieldProps as MuiTextFieldProps,\n} from '@material-ui/core/TextField';\nimport { FieldProps, getIn } from 'formik';\n\nexport interface TextFieldProps\n  extends FieldProps,\n    Omit<MuiTextFieldProps, 'name' | 'value' | 'error'> {}\n\nexport function fieldToTextField({\n  disabled,\n  field,\n  form: { isSubmitting, touched, errors },\n  ...props\n}: TextFieldProps): MuiTextFieldProps {\n  const fieldError = getIn(errors, field.name);\n  const showError = getIn(touched, field.name) && !!fieldError;\n\n  return {\n    ...props,\n    ...field,\n    error: showError,\n    helperText: showError ? fieldError : props.helperText,\n    disabled: disabled ?? isSubmitting,\n    variant: props.variant,\n  };\n}\n\nexport function TextField({ children, ...props }: TextFieldProps) {\n  return <MuiTextField {...fieldToTextField(props)}>{children}</MuiTextField>;\n}\n\nTextField.displayName = 'FormikMaterialUITextField';\n","import * as React from 'react';\nimport MuiSwitch, {\n  SwitchProps as MuiSwitchProps,\n} from '@material-ui/core/Switch';\nimport { FieldProps } from 'formik';\nimport invariant from 'tiny-warning';\n\nexport interface SwitchProps\n  extends FieldProps,\n    Omit<\n      MuiSwitchProps,\n      | 'checked'\n      | 'name'\n      | 'value'\n      | 'defaultChecked'\n      | 'form'\n      // Excluded for conflict with Field type\n      | 'type'\n    > {\n  type?: string;\n}\n\nexport function fieldToSwitch({\n  disabled,\n  field,\n  form: { isSubmitting },\n  type,\n  ...props\n}: SwitchProps): MuiSwitchProps {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      type === 'checkbox',\n      `property type=checkbox is missing from field ${field.name}, this can caused unexpected behaviour`\n    );\n  }\n\n  return {\n    disabled: disabled ?? isSubmitting,\n    ...props,\n    ...field,\n  };\n}\n\nexport function Switch(props: SwitchProps) {\n  return <MuiSwitch {...fieldToSwitch(props)} />;\n}\n\nSwitch.displayName = 'FormikMaterialUISwitch';\n","import * as React from 'react';\nimport MuiCheckbox, {\n  CheckboxProps as MuiCheckboxProps,\n} from '@material-ui/core/Checkbox';\nimport { FieldProps } from 'formik';\nimport invariant from 'tiny-warning';\n\nexport interface CheckboxProps\n  extends FieldProps,\n    Omit<\n      MuiCheckboxProps,\n      | 'name'\n      | 'value'\n      | 'error'\n      | 'form'\n      | 'checked'\n      | 'defaultChecked'\n      // Excluded for conflict with Field type\n      | 'type'\n    > {\n  type?: string;\n}\n\nexport function fieldToCheckbox({\n  disabled,\n  field,\n  form: { isSubmitting },\n  type,\n  ...props\n}: CheckboxProps): MuiCheckboxProps {\n  const indeterminate = !Array.isArray(field.value) && field.value == null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      type === 'checkbox',\n      `property type=checkbox is missing from field ${field.name}, this can caused unexpected behaviour`\n    );\n  }\n\n  return {\n    disabled: disabled ?? isSubmitting,\n    indeterminate,\n    ...props,\n    ...field,\n  };\n}\n\nexport function Checkbox(props: CheckboxProps) {\n  return <MuiCheckbox {...fieldToCheckbox(props)} />;\n}\n\nCheckbox.displayName = 'FormikMaterialUICheckbox';\n","import * as React from 'react';\nimport MuiCheckbox from '@material-ui/core/Checkbox';\nimport FormControlLabel, {\n  FormControlLabelProps as MuiFormControlLabelProps,\n} from '@material-ui/core/FormControlLabel';\nimport { FieldProps } from 'formik';\n\nimport { CheckboxProps, fieldToCheckbox } from './Checkbox';\n\n/**\n * Exclude props that are passed directly to the control\n * https://github.com/mui-org/material-ui/blob/v3.1.1/packages/material-ui/src/FormControlLabel/FormControlLabel.js#L71\n */\nexport interface CheckboxWithLabelProps extends FieldProps, CheckboxProps {\n  Label: Omit<\n    MuiFormControlLabelProps,\n    'checked' | 'name' | 'onChange' | 'value' | 'control'\n  >;\n}\n\nexport function CheckboxWithLabel<Val = unknown>({\n  Label,\n  ...props\n}: CheckboxWithLabelProps) {\n  return (\n    <FormControlLabel\n      control={<MuiCheckbox {...fieldToCheckbox(props)} />}\n      {...Label}\n    />\n  );\n}\n\nCheckboxWithLabel.displayName = 'FormikMaterialUICheckboxWithLabel';\n","import * as React from 'react';\nimport MuiSelect, {\n  SelectProps as MuiSelectProps,\n} from '@material-ui/core/Select';\nimport { FieldProps } from 'formik';\n\nexport interface SelectProps\n  extends FieldProps,\n    Omit<MuiSelectProps, 'name' | 'value'> {}\n\nexport function fieldToSelect({\n  disabled,\n  field,\n  form: { isSubmitting },\n  ...props\n}: SelectProps): MuiSelectProps {\n  return {\n    disabled: disabled ?? isSubmitting,\n    ...props,\n    ...field,\n  };\n}\n\nexport function Select(props: SelectProps) {\n  return <MuiSelect {...fieldToSelect(props)} />;\n}\n\nSelect.displayName = 'FormikMaterialUISelect';\n","import * as React from 'react';\nimport { FieldProps, getIn } from 'formik';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel, { InputLabelProps } from '@material-ui/core/InputLabel';\nimport Input, { InputProps } from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nexport interface SimpleFileUploadProps extends FieldProps {\n  label: string;\n  disabled?: boolean;\n  InputProps?: Omit<InputProps, 'name' | 'type' | 'onChange' | 'label'>;\n  InputLabelProps?: InputLabelProps;\n}\n\nexport const SimpleFileUpload = ({\n  field,\n  form: { isSubmitting, touched, errors, setFieldValue },\n  label,\n  disabled = false,\n  InputProps: inputProps,\n  InputLabelProps: inputLabelProps,\n}: SimpleFileUploadProps) => {\n  const error = getIn(touched, field.name) && getIn(errors, field.name);\n\n  return (\n    <div>\n      <FormControl>\n        {label && (\n          <InputLabel shrink error={!!error} {...inputLabelProps}>\n            {label}\n          </InputLabel>\n        )}\n        <Input\n          error={!!error}\n          inputProps={{\n            type: 'file',\n            disabled: disabled || isSubmitting,\n            name: field.name,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onChange: (event: React.ChangeEvent<any>) => {\n              const file = event.currentTarget.files[0];\n              setFieldValue(field.name, file);\n            },\n          }}\n          {...inputProps}\n        />\n        {error && <FormHelperText error>{error}</FormHelperText>}\n      </FormControl>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport MuiRadioGroup, {\n  RadioGroupProps as MuiRadioGroupProps,\n} from '@material-ui/core/RadioGroup';\nimport { FieldProps } from 'formik';\n\nexport interface RadioGroupProps\n  extends FieldProps,\n    Omit<MuiRadioGroupProps, 'name' | 'value'> {}\n\nexport function fieldToRadioGroup({\n  field,\n  // Exclude Form\n  form,\n  ...props\n}: RadioGroupProps): MuiRadioGroupProps {\n  return {\n    ...props,\n    ...field,\n  };\n}\n\nexport function RadioGroup(props: RadioGroupProps) {\n  return <MuiRadioGroup {...fieldToRadioGroup(props)} />;\n}\n\nRadioGroup.displayName = 'FormikMaterialUIRadioGroup';\n","import * as React from 'react';\nimport MuiInputBase, {\n  InputBaseProps as MuiInputBaseProps,\n} from '@material-ui/core/InputBase';\nimport { FieldProps } from 'formik';\n\nexport interface InputBaseProps\n  extends FieldProps,\n    Omit<MuiInputBaseProps, 'name' | 'value' | 'error'> {}\n\nexport function fieldToInputBase({\n  disabled,\n  field,\n  form: { isSubmitting },\n  ...props\n}: InputBaseProps): MuiInputBaseProps {\n  return {\n    disabled: disabled ?? isSubmitting,\n    ...props,\n    ...field,\n  };\n}\n\nexport function InputBase(props: InputBaseProps) {\n  return <MuiInputBase {...fieldToInputBase(props)} />;\n}\n\nInputBase.displayName = 'FormikMaterialUIInputBase';\n"]},"metadata":{},"sourceType":"module"}