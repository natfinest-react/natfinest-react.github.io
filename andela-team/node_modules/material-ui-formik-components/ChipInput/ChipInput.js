"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _materialUiChipInput = _interopRequireDefault(require("material-ui-chip-input"));

var _formik = require("formik");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var FChipInput = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(FChipInput, _React$PureComponent);

  var _super = _createSuper(FChipInput);

  function FChipInput() {
    var _this;

    _classCallCheck(this, FChipInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleAddChip = function (chip) {
      var _this$props = _this.props,
          setFieldValue = _this$props.form.setFieldValue,
          _this$props$field = _this$props.field,
          name = _this$props$field.name,
          value = _this$props$field.value;
      var newValue = [].concat(_toConsumableArray(value), [chip]);
      setFieldValue(name, newValue);
    };

    _this.handleDeleteChip = function (chip, index) {
      var _this$props2 = _this.props,
          setFieldValue = _this$props2.form.setFieldValue,
          _this$props2$field = _this$props2.field,
          name = _this$props2$field.name,
          value = _this$props2$field.value;
      var newValue = value.filter(function (val, idx) {
        return idx !== index;
      });
      setFieldValue(name, newValue);
    };

    return _this;
  }

  _createClass(FChipInput, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          required = _this$props3.required,
          _this$props3$form = _this$props3.form,
          dirty = _this$props3$form.dirty,
          touched = _this$props3$form.touched,
          errors = _this$props3$form.errors,
          _this$props3$field = _this$props3.field,
          name = _this$props3$field.name,
          value = _this$props3$field.value,
          options = _this$props3.options,
          fullWidth = _this$props3.fullWidth,
          margin = _this$props3.margin,
          other = _objectWithoutProperties(_this$props3, ["required", "form", "field", "options", "fullWidth", "margin"]);

      var id = "chip_".concat(name);
      var errorText = (0, _formik.getIn)(errors, name);
      var touchedVal = (0, _formik.getIn)(touched, name);
      var hasError = dirty && touchedVal && errorText !== undefined;
      return /*#__PURE__*/_react["default"].createElement(_materialUiChipInput["default"], _extends({
        required: required,
        value: value,
        InputProps: {
          name: name,
          id: "input_".concat(id)
        },
        onAdd: this.handleAddChip,
        onDelete: this.handleDeleteChip,
        helperText: hasError ? errorText : '',
        error: hasError,
        margin: margin,
        fullWidth: fullWidth // eslint-disable-next-line react/jsx-props-no-spreading

      }, other));
    }
  }]);

  return FChipInput;
}(_react["default"].PureComponent);

FChipInput.propTypes = {
  label: _propTypes["default"].string,
  field: _propTypes["default"].shape({
    name: _propTypes["default"].string,
    onChange: _propTypes["default"].func,
    value: _propTypes["default"].arrayOf(_propTypes["default"].string)
  }).isRequired,
  form: _propTypes["default"].shape({
    dirty: _propTypes["default"].bool,
    errors: _propTypes["default"].object
  }).isRequired,
  fullWidth: _propTypes["default"].bool,
  margin: _propTypes["default"].oneOf(['none', 'dense', 'normal']),
  newChipKeyCodes: _propTypes["default"].arrayOf(_propTypes["default"].number)
};
FChipInput.defaultProps = {
  label: '',
  fullWidth: true,
  margin: 'normal',
  // http://gcctech.org/csc/javascript/javascript_keycodes.htm
  // Enter, Space, Comma
  newChipKeyCodes: [13, 32, 188]
};
var _default = FChipInput;
exports["default"] = _default;