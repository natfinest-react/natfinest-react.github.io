"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _Autocomplete = _interopRequireDefault(require("@material-ui/lab/Autocomplete"));

var _formik = require("formik");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FAutocomplete = function FAutocomplete(props) {
  var field = props.field,
      _props$form = props.form,
      dirty = _props$form.dirty,
      touched = _props$form.touched,
      errors = _props$form.errors,
      setFieldValue = _props$form.setFieldValue,
      options = props.options,
      getOptionLabel = props.getOptionLabel,
      textFieldProps = props.textFieldProps,
      autoCompleteProps = _objectWithoutProperties(props, ["field", "form", "options", "getOptionLabel", "textFieldProps"]); // Merge default textFieldProps with textFieldProps passed in the component


  var mergedTextFieldProps = _objectSpread(_objectSpread({}, FAutocomplete.defaultProps.textFieldProps), textFieldProps);

  var errorText = (0, _formik.getIn)(errors, field.name);
  var touchedVal = (0, _formik.getIn)(touched, field.name);
  var hasError = dirty && touchedVal && errorText !== undefined;
  var isMultiple = autoCompleteProps.multiple;
  var isMultipleWithValue = isMultiple && field.value;
  var canBeRendered = !isMultiple || isMultipleWithValue;

  if (isMultiple && field.value === null) {
    // eslint-disable-next-line no-console
    console.error("Initial value of autocomplete with name: \"".concat(field.name, "\" cannot be null. Use [] instead."));
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, canBeRendered && /*#__PURE__*/_react["default"].createElement(_Autocomplete["default"], _extends({
    options: options,
    getOptionLabel: getOptionLabel,
    onChange: function onChange(_, value) {
      return setFieldValue(field.name, value);
    },
    value: field.value,
    getOptionSelected: function getOptionSelected(option, val) {
      return option.value === val.value;
    },
    renderInput: function renderInput(params) {
      return /*#__PURE__*/_react["default"].createElement(_TextField["default"], _extends({}, params, {
        error: hasError,
        helperText: hasError ? errorText : ''
      }, mergedTextFieldProps));
    }
  }, autoCompleteProps)));
};

FAutocomplete.propTypes = {
  form: _propTypes["default"].shape({
    dirty: _propTypes["default"].bool,
    errors: _propTypes["default"].object,
    setFieldValue: _propTypes["default"].func
  }).isRequired,
  options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].string,
    value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])
  })).isRequired,
  getOptionLabel: _propTypes["default"].func,
  textFieldProps: _propTypes["default"].shape({
    label: _propTypes["default"].string,
    required: _propTypes["default"].bool,
    fullWidth: _propTypes["default"].bool,
    margin: _propTypes["default"].oneOf(['none', 'dense', 'normal'])
  })
};
FAutocomplete.defaultProps = {
  getOptionLabel: function getOptionLabel(option) {
    return option.label;
  },
  textFieldProps: {
    required: false,
    fullWidth: true,
    margin: 'normal'
  }
};
var _default = FAutocomplete;
exports["default"] = _default;